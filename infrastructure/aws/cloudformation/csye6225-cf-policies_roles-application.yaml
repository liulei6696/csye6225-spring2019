
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  bucketName:
    Type: String
Resources:
  CodeDeployEC2ServiceRole:      
    Type: AWS::IAM::Role
    Properties: 
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Principal: 
                Service: 
                  - "ec2.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        RoleName: "CodeDeployEC2ServiceRole" 
  CodeDeployServiceRole:      
    Type: AWS::IAM::Role
    Properties: 
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Principal: 
                Service: 
                  - "codedeploy.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        RoleName: "CodeDeployServiceRole" 

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      - arn:aws:iam::aws:policy/AmazonSESFullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole
      RoleName: LambdaExecutionRole
        ## Role



  Policy1:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
        ManagedPolicyName: "circleci-ec2-ami"
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Action: 
                - "ec2:AttachVolume"
                - "ec2:AuthorizeSecurityGroupIngress"
                - "ec2:CopyImage"
                - "ec2:CreateImage"
                - "ec2:CreateKeypair"
                - "ec2:CreateSecurityGroup"
                - "ec2:CreateSnapshot"
                - "ec2:CreateTags"
                - "ec2:CreateVolume"
                - "ec2:DeleteKeyPair"
                - "ec2:DeleteSecurityGroup"
                - "ec2:DeleteSnapshot"
                - "ec2:DeleteVolume"
                - "ec2:DeregisterImage"
                - "ec2:DescribeImageAttribute"
                - "ec2:DescribeImages"
                - "ec2:DescribeInstances"
                - "ec2:DescribeInstanceStatus"
                - "ec2:DescribeRegions"
                - "ec2:DescribeSecurityGroups"
                - "ec2:DescribeSnapshots"
                - "ec2:DescribeSubnets"
                - "ec2:DescribeTags"
                - "ec2:DescribeVolumes"
                - "ec2:DetachVolume"
                - "ec2:GetPasswordData"
                - "ec2:ModifyImageAttribute"
                - "ec2:ModifyInstanceAttribute"
                - "ec2:ModifySnapshotAttribute"
                - "ec2:RegisterImage"
                - "ec2:RunInstances"
                - "ec2:StopInstances"
                - "ec2:TerminateInstances"
              Resource: "*"
        Users:
          - "circleci"
  Policy2:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
        ManagedPolicyName: "CodeDeploy-EC2-S3"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action: "s3:*"
              Resource: "*"
        Roles:
          - !Ref "CodeDeployEC2ServiceRole"
  Policy3:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
        ManagedPolicyName: "CircleCI-Upload-To-S3"
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Action: 
                - "s3:*"
              Resource: 
                - !Sub "arn:aws:s3:::${bucketName}"
                - !Sub "arn:aws:s3:::${bucketName}/*"
        Users:
          - "circleci"
  Policy4:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
        ManagedPolicyName: "CirlceCI-Code-Deploy"
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Action:
                - "codedeploy:RegisterApplicationRevision"
                - "codedeploy:GetApplicationRevision"
              Resource: !Join 
                          - ":"
                          - - "arn:aws:codedeploy"
                            - !Ref AWS::Region
                            - !Ref AWS::AccountId
                            - "application:csye6225-webapp"          
            -
              Effect: "Allow"
              Action: 
                - "codedeploy:CreateDeployment"
                - "codedeploy:GetDeployment"
              Resource: "*"  
            -
              Effect: "Allow"
              Action: 
                - "codedeploy:GetDeploymentConfig"
              Resource: 
                - !Join 
                    - ":"
                    - - "arn:aws:codedeploy"
                      - !Ref AWS::Region
                      - !Ref AWS::AccountId 
                      - "deploymentconfig:CodeDeployDefault.OneAtATime"
                - !Join 
                    - ":"
                    - - "arn:aws:codedeploy"
                      - !Ref AWS::Region
                      - !Ref AWS::AccountId
                      - "deploymentconfig:CodeDeployDefault.HalfAtATime"
                - !Join 
                    - ":"
                    - - "arn:aws:codedeploy"
                      - !Ref AWS::Region
                      - !Ref AWS::AccountId
                      - "deploymentconfig:CodeDeployDefault.AllAtOnce"
        Users:
          - "circleci"
  
  
  CloudWatchRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          Resource:
          - arn:aws:logs:*:*:*
      Roles:
      - Ref: CodeDeployEC2ServiceRole
  
  
  EC2InstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - 
          !Ref "CodeDeployEC2ServiceRole"
      InstanceProfileName: "CodeDeployEC2ServiceRole"
  CodeDeployInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - 
          !Ref "CodeDeployServiceRole"
      InstanceProfileName: "CodeDeployServiceRole"
      ## CodeDeploy
Outputs:
  EC2InstanceProfile: 
    Description: Codeploy Role for Ec2 Instance
    Value: !Ref EC2InstanceProfile
    Export:
      Name: !Sub ${AWS::StackName}-Ec2InstanceProfile
  CodeDeployEC2ServiceRole: 
    Description: Codeploy Role 
    Value: !GetAtt CodeDeployServiceRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CodeDeployServiceRole-Arn