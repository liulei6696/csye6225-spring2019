{
  "Parameters": {
    "CertificateArn1": {
      "Type": "String"
    },
    "stackName": {
      "Type": "String"
    },
    "refStackName": {
      "Type": "String"
    },
    "amiId": {
      "Type": "String"
    },
    "roleStackName": {
      "Type": "String"
    },
    "S3BucketName": {
      "Type": "String"
    },
    "DomainName": {
      "Type": "String"
    },
    "WebServerSecurityGroupID": {
      "Type": "String"
    },
    "LoadBalancerName": {
      "Type": "String"
    },
    "LoadBalancerSecurityGroupID": {
      "Type": "String"
    },
    "DBServerSecurityGroupID": {
      "Type": "String"
    },
    "TagKey": {
      "Type": "String"
    },
    "TagValue": {
      "Type": "String"
    },
    "ParamVpcId": {
      "Type": "String"
    },
    "HostedZoneId": {
      "Type": "String"
    },
    "ruleAction": {
      "Type": "String",
      "Description": "The type of action you want to iplement for the rules in this set. Valid options are COUNT or BLOCK.",
      "AllowedValues": [
        "BLOCK",
        "COUNT"
      ],
      "Default": "BLOCK"
    },
    "includesPrefix": {
      "Type": "String",
      "Description": "This is the URI path prefix (starting with '/') that identifies any files in your webroot that are server-side included components, and should not be invoked directly via URL. These can be headers, footers, 3rd party server side libraries or components. You can add additional prefixes later directly in the set.",
      "Default": "/includes"
    },
    "adminUrlPrefix": {
      "Type": "String",
      "Description": "This is the URI path prefix (starting with '/') that identifies your administrative sub-site. You can add additional prefixes later directly in the set.",
      "Default": "/admin"
    },
    "adminRemoteCidr": {
      "Type": "String",
      "Description": "This is the IP address allowed to access your administrative interface. Use CIDR notation. You can add additional ones later directly in the set.",
      "Default": "127.0.0.1/32"
    },
    "maxExpectedURISize": {
      "Type": "Number",
      "Description": "Maximum number of bytes allowed in the URI component of the HTTP request. Generally the maximum possible value is determined by the server operating system (maps to file system paths), the web server software, or other middleware components. Choose a value that accomodates the largest URI segment you use in practice in your web application.",
      "Default": 512
    },
    "maxExpectedQueryStringSize": {
      "Type": "Number",
      "Description": "Maximum number of bytes allowed in the query string component of the HTTP request. Normally the  of query string parameters following the \"?\" in a URL is much larger than the URI , but still bounded by the  of the parameters your web application uses and their values.",
      "Default": 1024
    },
    "maxExpectedBodySize": {
      "Type": "Number",
      "Description": "Maximum number of bytes allowed in the body of the request. If you do not plan to allow large uploads, set it to the largest payload value that makes sense for your web application. Accepting unnecessarily large values can cause performance issues, if large payloads are used as an attack vector against your web application.",
      "Default": 4096
    },
    "maxExpectedCookieSize": {
      "Type": "Number",
      "Description": "Maximum number of bytes allowed in the cookie header. The maximum size should be less than 4096, the size is determined by the amount of information your web application stores in cookies. If you only pass a session token via cookies, set the size to no larger than the serialized size of the session token and cookie metadata.",
      "Default": 4093
    },
    "csrfExpectedHeader": {
      "Type": "String",
      "Description": "The custom HTTP request header, where the CSRF token value is expected to be encountered",
      "Default": "x-csrf-token"
    },
    "csrfExpectedSize": {
      "Type": "Number",
      "Description": "The size in bytes of the CSRF token value. For example if it's a canonically formatted UUIDv4 value the expected size would be 36 bytes/ASCII characters",
      "Default": 36
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Resource Prefix"
          },
          "Parameters": [
            "stackName"
          ]
        },
        {
          "Label": {
            "default": "WAF Implementation"
          },
          "Parameters": [
            "ruleAction"
          ]
        },
        {
          "Label": {
            "default": "Generic HTTP Request Enforcement"
          },
          "Parameters": [
            "maxExpectedURISize",
            "maxExpectedQueryStringSize",
            "maxExpectedBodySize",
            "maxExpectedCookieSize"
          ]
        },
        {
          "Label": {
            "default": "Administrative Interface"
          },
          "Parameters": [
            "adminUrlPrefix",
            "adminRemoteCidr"
          ]
        },
        {
          "Label": {
            "default": "Cross-Site Request Forgery (CSRF)"
          },
          "Parameters": [
            "csrfExpectedHeader",
            "csrfExpectedSize"
          ]
        },
        {
          "Label": {
            "default": "Application Specific"
          },
          "Parameters": [
            "includesPrefix"
          ]
        }
      ],
      "ParameterLabels": {
        "stackName": {
          "default": "Resource Name Prefix"
        },
        "ruleAction": {
          "default": "Rule Effect"
        },
        "includesPrefix": {
          "default": "Server-side components URI prefix"
        },
        "adminUrlPrefix": {
          "default": "URI prefix"
        },
        "adminRemoteCidr": {
          "default": "Allowed IP source (CIDR)"
        },
        "maxExpectedURISize": {
          "default": "Max. size of URI"
        },
        "maxExpectedQueryStringSize": {
          "default": "Max. size of QUERY STRING"
        },
        "maxExpectedBodySize": {
          "default": "Max. size of BODY"
        },
        "maxExpectedCookieSize": {
          "default": "Max. size of COOKIE"
        },
        "csrfExpectedHeader": {
          "default": "HTTP Request Header"
        },
        "csrfExpectedSize": {
          "default": "Token Size"
        }
      }
    }
  },
  "Resources": {
    "CodeDeployEC2ServiceRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          "CodeDeployEC2ServiceRole"
        ]
      }
    },
    "AsgLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "InstanceType": "t2.micro",
        "ImageId": {
          "Ref": "amiId"
        },
        "KeyName": "csye6225",
        "SecurityGroups": [
          {
            "Ref": "WebServerSecurityGroupID"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdm",
            "Ebs": {
              "VolumeType": "gp2",
              "DeleteOnTermination": true,
              "VolumeSize": 20
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe \n",
                "sudo su \n",
                "echo '#!/bin/sh' >> /opt/tomcat/bin/setenv.sh \n",
                "chmod +x /opt/tomcat/latest/bin/setenv.sh\n",
                {
                  "Fn::Sub": "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.profiles.active=prod\"', >> /opt/tomcat/latest/bin/setenv.sh  \n"
                },
                {
                  "Fn::Sub": "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.url=jdbc:mysql://${MyRDSInstance.Endpoint.Address}:3306/csye6225\"' >> /opt/tomcat/latest/bin/setenv.sh \n"
                },
                {
                  "Fn::Sub": "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.username=csye6225master\"' >> /opt/tomcat/latest/bin/setenv.sh \n"
                },
                {
                  "Fn::Sub": "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.password=csye6225password\"' >> /opt/tomcat/latest/bin/setenv.sh \n"
                },
                {
                  "Fn::Sub": "echo 'JAVA_OPTS=\"$JAVA_OPTS -Daws.s3.audio.bucket=${S3BucketName}\"' >> /opt/tomcat/latest/bin/setenv.sh \n"
                },
                {
                  "Fn::Sub": "echo 'JAVA_OPTS=\"$JAVA_OPTS -Ddomain.name=${DomainName}\"' >> /opt/tomcat/latest/bin/setenv.sh \n"
                },
                {
                  "Fn::Sub": "echo 'JAVA_OPTS=\"$JAVA_OPTS -Daws.sns.topic.arn=${PasswdResetTopic}\"' >> /opt/tomcat/latest/bin/setenv.sh \n"
                },
                "systemctl daemon-reload\n"
              ]
            ]
          }
        },
        "IamInstanceProfile": {
          "Ref": "CodeDeployEC2ServiceRoleInstanceProfile"
        }
      }
    },
    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "AsgLaunchConfig"
        },
        "MinSize": "3",
        "DesiredCapacity": "3",
        "MaxSize": "10",
        "TargetGroupARNs": [
          {
            "Ref": "ALBTargetGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-Ec2Instance"
            },
            "PropagateAtLaunch": "true"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${refStackName}-SUBNETAID"
            }
          }
        ]
      },
      "DependsOn": "ALBListener"
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 10% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "10",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 5% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "5",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": {
          "Ref": "LoadBalancerName"
        },
        "Scheme": "internet-facing",
        "Subnets": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${refStackName}-SUBNETAID"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${refStackName}-SUBNETBID"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${refStackName}-SUBNETCID"
            }
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "LoadBalancerSecurityGroupID"
          }
        ],
        "Type": "application",
        "IpAddressType": "ipv4"
      }
    },
    "ALBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "ALBTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "LoadBalancer"
        },
        "Port": "443",
        "Protocol": "HTTPS",
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "CertificateArn1"
            }
          }
        ]
      }
    },
    "ALBListener2": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "ALBTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "LoadBalancer"
        },
        "Port": "8080",
        "Protocol": "HTTP"
      }
    },
    "ALBTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 30,
        "UnhealthyThresholdCount": 10,
        "HealthCheckPath": "/",
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "20"
          }
        ],
        "Name": "MyTargetGroup",
        "HealthCheckPort": 8080,
        "TargetType": "instance",
        "Port": 8080,
        "Protocol": "HTTP",
        "VpcId": {
          "Ref": "ParamVpcId"
        }
      }
    },
    "DomainRecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "HostedZoneId": {
            "Fn::GetAtt": [
              "LoadBalancer",
              "CanonicalHostedZoneID"
            ]
          },
          "DNSName": {
            "Fn::GetAtt": [
              "LoadBalancer",
              "DNSName"
            ]
          }
        },
        "HostedZoneId": {
          "Ref": "HostedZoneId"
        },
        "Name": {
          "Ref": "DomainName"
        },
        "Type": "A"
      }
    },
    "EmailDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "email_address",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "email_address",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        },
        "TableName": "email_token",
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        }
      }
    },
    "MyRDSInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName": "csye6225",
        "Engine": "MySQL",
        "DBInstanceClass": "db.t2.medium",
        "MultiAZ": false,
        "DBInstanceIdentifier": "csye6225-spring2019",
        "MasterUsername": "csye6225master",
        "MasterUserPassword": "csye6225password",
        "DBSubnetGroupName": {
          "Ref": "myDBSubnetGroup"
        },
        "PubliclyAccessible": true,
        "AllocatedStorage": 5,
        "VPCSecurityGroups": [
          {
            "Ref": "DBServerSecurityGroupID"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-csye6225-dyndb"
            }
          }
        ]
      }
    },
    "myDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "subnet group for RDS instance",
        "SubnetIds": [
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${refStackName}-SUBNETAID"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${refStackName}-SUBNETBID"
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Sub": "${refStackName}-SUBNETCID"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-csye6225-rdssubg"
            }
          }
        ]
      }
    },
    "PasswdResetTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": "EmailLambdaFunc.Arn"
            },
            "Protocol": "lambda"
          }
        ],
        "TopicName": "PasswdResetTopic"
      }
    },
    "EmailLambdaFunc": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "email_service",
        "Handler": "index.handler",
        "Role": {
          "Fn::ImportValue": {
            "Fn::Sub": "${roleStackName}-LambdaRole-Arn"
          }
        },
        "Code": {
          "ZipFile": "def handler(event, context):\n  print(\"Lambda functoion for email service created, nothing here\")\n"
        },
        "Runtime": "python3.6",
        "Timeout": 5,
        "MemorySize": 128
      }
    },
    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": "EmailLambdaFunc.Arn"
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "PasswdResetTopic"
        }
      }
    },
    "WebappApplication": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ApplicationName": "csye6225-webapp",
        "ComputePlatform": "Server"
      }
    },
    "WebappDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": {
          "Ref": "WebappApplication"
        },
        "AutoRollbackConfiguration": {
          "Enabled": true,
          "Events": [
            "DEPLOYMENT_FAILURE"
          ]
        },
        "DeploymentConfigName": "CodeDeployDefault.AllAtOnce",
        "DeploymentGroupName": "csye6225-webapp-deployment",
        "DeploymentStyle": {
          "DeploymentType": "IN_PLACE",
          "DeploymentOption": "WITHOUT_TRAFFIC_CONTROL"
        },
        "Ec2TagFilters": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-Ec2Instance"
            },
            "Type": "KEY_AND_VALUE"
          }
        ],
        "ServiceRoleArn": {
          "Fn::ImportValue": {
            "Fn::Sub": "${roleStackName}-CodeDeployServiceRole-Arn"
          }
        }
      }
    },

    "wafrSQLiSet": {
      "Type": "AWS::WAFRegional::SqlInjectionMatchSet",
      "Properties": {
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "detect-sqli" ] ] },
        "SqlInjectionMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          }
        ]
      }
    },
    "wafrSQLiRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": { "Fn::Join" : [ "", [ { "Ref" : "stackName" }, "mitigatesqli" ] ] },
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "mitigate-sqli" ] ] },
        "Predicates": [
          {
            "Type": "SqlInjectionMatch",
            "Negated": false,
            "DataId": { "Ref" : "wafrSQLiSet" }
          }
        ]
      }
    },
    "wafrAuthTokenStringSet": {
      "Type": "AWS::WAFRegional::ByteMatchSet",
      "Properties": {
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "match-auth-tokens" ] ] },
        "ByteMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "example-session-id",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "authorization"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": ".TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ",
            "TextTransformation": "URL_DECODE"
          }
        ]
      }
    },
    "wafrAuthTokenRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": { "Fn::Join" : [ "", [ { "Ref" : "stackName" }, "badauthtokens" ] ] },
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "detect-bad-auth-tokens" ] ] },
        "Predicates": [
          {
            "Type": "ByteMatch",
            "Negated": false,
            "DataId": { "Ref" : "wafrAuthTokenStringSet" }
          }
        ]
      }
    },
    "wafrXSSSet": {
      "Type": "AWS::WAFRegional::XssMatchSet",
      "Properties": {
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "detect-xss" ] ] },
        "XssMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          }
        ]
      }
    },
    "wafrXSSRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": { "Fn::Join" : [ "", [ { "Ref" : "stackName" }, "mitigatexss" ] ] },
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "mitigate-xss" ] ] },
        "Predicates": [
          {
            "Type": "XssMatch",
            "Negated": false,
            "DataId": { "Ref" : "wafrXSSSet" }
          }
        ]
      }
    },
    "wafrPathsStringSet": {
      "Type": "AWS::WAFRegional::ByteMatchSet",
      "Properties": {
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "match-rfi-lfi-traversal" ] ] },
        "ByteMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "../",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "../",
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "../",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "../",
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "://",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "://",
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "://",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "://",
            "TextTransformation": "HTML_ENTITY_DECODE"
          }
        ]
      }
    },
    "wafrPathsRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": { "Fn::Join" : [ "", [ { "Ref" : "stackName" }, "detectrfilfi" ] ] },
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "detect-rfi-lfi-traversal" ] ] },
        "Predicates": [
          {
            "Type": "ByteMatch",
            "Negated": false,
            "DataId": { "Ref" : "wafrPathsStringSet" }
          }
        ]
      }
    },
    "wafrAdminUrlStringSet": {
      "Type": "AWS::WAFRegional::ByteMatchSet",
      "Properties": {
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "match-admin-url" ] ] },
        "ByteMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "STARTS_WITH",
            "TargetString": { "Ref" : "adminUrlPrefix" },
            "TextTransformation": "URL_DECODE"
          }
        ]
      }
    },
    "wafrAdminRemoteAddrIpSet": {
      "Type": "AWS::WAFRegional::IPSet",
      "Properties": {
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "match-admin-remote-ip" ] ] },
        "IPSetDescriptors": [
          {
            "Type": "IPV4",
            "Value": { "Ref" : "adminRemoteCidr" }
          }
        ]
      }
    },
    "wafrAdminAccessRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": { "Fn::Join" : [ "", [ { "Ref" : "stackName" }, "detectadminaccess" ] ] },
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "detect-admin-access" ] ] },
        "Predicates": [
          {
            "Type": "ByteMatch",
            "Negated": false,
            "DataId": { "Ref" : "wafrAdminUrlStringSet" }
          },
          {
            "Type": "IPMatch",
            "Negated": true,
            "DataId": { "Ref" : "wafrAdminRemoteAddrIpSet" }
          }
        ]
      }
    },
    "wafrPHPInsecureQSStringSet": {
      "Type": "AWS::WAFRegional::ByteMatchSet",
      "Properties": {
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "match-php-insecure-var-refs" ] ] },
        "ByteMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "_SERVER[",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "_ENV[",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "auto_prepend_file=",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "auto_append_file=",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "allow_url_include=",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "disable_functions=",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "open_basedir=",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "PositionalConstraint": "CONTAINS",
            "TargetString": "safe_mode=",
            "TextTransformation": "URL_DECODE"
          }
        ]
      }
    },
    "wafrPHPInsecureURIStringSet": {
      "Type": "AWS::WAFRegional::ByteMatchSet",
      "Properties": {
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "match-php-insecure-uri" ] ] },
        "ByteMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": "php",
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": "/",
            "TextTransformation": "URL_DECODE"
          }
        ]
      }
    },
    "wafrPHPInsecureRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": { "Fn::Join" : [ "", [ { "Ref" : "stackName" }, "detectphpinsecure" ] ] },
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "detect-php-insecure" ] ] },
        "Predicates": [
          {
            "Type": "ByteMatch",
            "Negated": false,
            "DataId": { "Ref" : "wafrPHPInsecureQSStringSet" }
          },
          {
            "Type": "ByteMatch",
            "Negated": false,
            "DataId": { "Ref" : "wafrPHPInsecureURIStringSet" }
          }
        ]
      }
    },
    "wafrSizeRestrictionSet": {
      "Type": "AWS::WAFRegional::SizeConstraintSet",
      "Properties": {
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "size-restrictions" ] ] },
        "SizeConstraints": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "NONE",
            "ComparisonOperator": "GT",
            "Size": { "Ref" : "maxExpectedURISize" }
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "NONE",
            "ComparisonOperator": "GT",
            "Size": { "Ref" : "maxExpectedQueryStringSize" }
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "NONE",
            "ComparisonOperator": "GT",
            "Size": { "Ref" : "maxExpectedBodySize" }
          },
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": "cookie"
            },
            "TextTransformation": "NONE",
            "ComparisonOperator": "GT",
            "Size": { "Ref" : "maxExpectedCookieSize" }
          }
        ]
      }
    },
    "wafrSizeRestrictionRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": { "Fn::Join" : [ "", [ { "Ref" : "stackName" }, "restrictsizes" ] ] },
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "restrict-sizes" ] ] },
        "Predicates": [
          {
            "Type": "SizeConstraint",
            "Negated": false,
            "DataId": { "Ref" : "wafrSizeRestrictionSet" }
          }
        ]
      }
    },
    "wafrCSRFMethodStringSet": {
      "Type": "AWS::WAFRegional::ByteMatchSet",
      "Properties": {
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "match-csrf-methodkm," ] ] },
        "ByteMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "METHOD"
            },
            "PositionalConstraint": "EXACTLY",
            "TargetString": "post",
            "TextTransformation": "LOWERCASE"
          }
        ]
      }
    },
    "wafrCSRFTokenSizeConstraint": {
      "Type": "AWS::WAFRegional::SizeConstraintSet",
      "Properties": {
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "match-csrf-token" ] ] },
        "SizeConstraints": [
          {
            "FieldToMatch": {
              "Type": "HEADER",
              "Data": { "Ref" : "csrfExpectedHeader" }
            },
            "TextTransformation": "NONE",
            "ComparisonOperator": "EQ",
            "Size": { "Ref" : "csrfExpectedSize" }
          }
        ]
      }
    },
    "wafrCSRFRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": { "Fn::Join" : [ "", [ { "Ref" : "stackName" }, "enforcecsrf" ] ] },
        "Name":  { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "enforce-csrf" ] ] },
        "Predicates": [
          {
            "Type": "ByteMatch",
            "Negated": false,
            "DataId": { "Ref" : "wafrCSRFMethodStringSet" }
          },
          {
            "Type": "SizeConstraint",
            "Negated": true,
            "DataId": { "Ref" : "wafrCSRFTokenSizeConstraint" }
          }
        ]
      }
    },
    "wafrServerSideIncludeStringSet": {
      "Type": "AWS::WAFRegional::ByteMatchSet",
      "Properties": {
        "Name":  { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "match-ssi" ] ] },
        "ByteMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "STARTS_WITH",
            "TargetString": { "Ref" : "includesPrefix" },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": ".cfg",
            "TextTransformation": "LOWERCASE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": ".conf",
            "TextTransformation": "LOWERCASE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": ".config",
            "TextTransformation": "LOWERCASE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": ".ini",
            "TextTransformation": "LOWERCASE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": ".log",
            "TextTransformation": "LOWERCASE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": ".bak",
            "TextTransformation": "LOWERCASE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "PositionalConstraint": "ENDS_WITH",
            "TargetString": ".backup",
            "TextTransformation": "LOWERCASE"
          }
        ]
      }
    },
    "wafrServerSideIncludeRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": { "Fn::Join" : [ "", [ { "Ref" : "stackName" }, "detectssi" ] ] },
        "Name":  { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "detect-ssi" ] ] },
        "Predicates": [
          {
            "Type": "ByteMatch",
            "Negated": false,
            "DataId": { "Ref" : "wafrServerSideIncludeStringSet" }
          }
        ]
      }
    },
    "wafrBlacklistIpSet": {
      "Type": "AWS::WAFRegional::IPSet",
      "Properties": {
        "Name": { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "match-blacklisted-ips" ] ] },
        "IPSetDescriptors": [
          {
            "Type": "IPV4",
            "Value": "10.0.0.0/8"
          },
          {
            "Type": "IPV4",
            "Value": "192.168.0.0/16"
          },
          {
            "Type": "IPV4",
            "Value": "169.254.0.0/16"
          },
          {
            "Type": "IPV4",
            "Value": "172.16.0.0/16"
          },
          {
            "Type": "IPV4",
            "Value": "127.0.0.1/32"
          }
        ]
      }
    },
    "wafrBlacklistIpRule": {
      "Type": "AWS::WAFRegional::Rule",
      "Properties": {
        "MetricName": { "Fn::Join" : [ "", [ { "Ref" : "stackName" }, "blacklistedips" ] ] },
        "Name":  { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "detect-blacklisted-ips" ] ] },
        "Predicates": [
          {
            "Type": "IPMatch",
            "Negated": false,
            "DataId": { "Ref" : "wafrBlacklistIpSet" }
          }
        ]
      }
    },
    "wafrOwaspACL": {
      "Type": "AWS::WAFRegional::WebACL",
      "Properties": {
        "MetricName": { "Fn::Join" : [ "", [ { "Ref" : "stackName" }, "owaspacl" ] ] },
        "Name":  { "Fn::Join" : [ "-", [ { "Ref" : "stackName" }, "owasp-acl" ] ] },
        "DefaultAction": {
          "Type": "ALLOW"
        },
        "Rules": [
          {
            "Action": {
              "Type": { "Ref" : "ruleAction" }
            },
            "Priority": 10,
            "RuleId": { "Ref" : "wafrSizeRestrictionRule" }
          },
          {
            "Action": {
              "Type": { "Ref" : "ruleAction" }
            },
            "Priority": 20,
            "RuleId": { "Ref" : "wafrBlacklistIpRule" }
          },
          {
            "Action": {
              "Type": { "Ref" : "ruleAction" }
            },
            "Priority": 30,
            "RuleId": { "Ref" : "wafrAuthTokenRule" }
          },
          {
            "Action": {
              "Type": { "Ref" : "ruleAction" }
            },
            "Priority": 40,
            "RuleId": { "Ref" : "wafrSQLiRule" }
          },
          {
            "Action": {
              "Type": { "Ref" : "ruleAction" }
            },
            "Priority": 50,
            "RuleId": { "Ref" : "wafrXSSRule" }
          },
          {
            "Action": {
              "Type": { "Ref" : "ruleAction" }
            },
            "Priority": 60,
            "RuleId": { "Ref" : "wafrPathsRule" }
          },
          {
            "Action": {
              "Type": { "Ref" : "ruleAction" }
            },
            "Priority": 70,
            "RuleId": { "Ref" : "wafrPHPInsecureRule" }
          },
          {
            "Action": {
              "Type": { "Ref" : "ruleAction" }
            },
            "Priority": 80,
            "RuleId": { "Ref" : "wafrCSRFRule" }
          },
          {
            "Action": {
              "Type": { "Ref" : "ruleAction" }
            },
            "Priority": 90,
            "RuleId": { "Ref" : "wafrServerSideIncludeRule" }
          },
          {
            "Action": {
              "Type": { "Ref" : "ruleAction" }
            },
            "Priority": 100,
            "RuleId": { "Ref" : "wafrAdminAccessRule" }
          }
        ]
      }
    },
    "MyACLAssociation": {
      "Type" : "AWS::WAFRegional::WebACLAssociation",
      "Properties" : {
        "ResourceArn" : { "Ref": "LoadBalancer" },
        "WebACLId" : { "Ref": "wafrOwaspACL" }
      }
}
  }
}