
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  CertificateArn1:
    Type: String
  stackName:
    Type: String
  refStackName:
    Type: String
  amiId:
    Type: String
  roleStackName:
    Type: String
  S3BucketName:
    Type: String
  DomainName:
    Type: String
  WebServerSecurityGroupID:
    Type: String
  LoadBalancerName:
    Type: String
  LoadBalancerSecurityGroupID:
    Type: String
  DBServerSecurityGroupID:
    Type: String
  TagKey:
    Type: String
  TagValue:
    Type: String
  ParamVpcId:
    Type: String
  HostedZoneId:
    Type: String
  stackScope:
    Type: String
    Description: You can deploy this stack at a regional level, for regional WAF targets like Application Load Balancers, or for global targets, such as Amazon CloudFront distributions.
    AllowedValues:
      - Global
      - Regional
    Default: Regional
  ruleAction:
    Type: String
    Description: The type of action you want to iplement for the rules in this set.
      Valid options are COUNT or BLOCK.
    AllowedValues:
    - BLOCK
    - COUNT
    Default: BLOCK
  includesPrefix:
    Type: String
    Description: This is the URI path prefix (starting with '/') that identifies any
      files in your webroot that are server-side included components, and should not
      be invoked directly via URL. These can be headers, footers, 3rd party server
      side libraries or components. You can add additional prefixes later directly
      in the set.
    Default: "/includes"
  adminUrlPrefix:
    Type: String
    Description: This is the URI path prefix (starting with '/') that identifies your
      administrative sub-site. You can add additional prefixes later directly in the
      set.
    Default: "/admin"
  adminRemoteCidr:
    Type: String
    Description: This is the IP address allowed to access your administrative interface.
      Use CIDR notation. You can add additional ones later directly in the set.
    Default: 127.0.0.1/32
  maxExpectedURISize:
    Type: Number
    Description: Maximum number of bytes allowed in the URI component of the HTTP
      request. Generally the maximum possible value is determined by the server operating
      system (maps to file system paths), the web server software, or other middleware
      components. Choose a value that accomodates the largest URI segment you use
      in practice in your web application.
    Default: 512
  maxExpectedQueryStringSize:
    Type: Number
    Description: Maximum number of bytes allowed in the query string component of
      the HTTP request. Normally the  of query string parameters following the "?"
      in a URL is much larger than the URI , but still bounded by the  of the parameters
      your web application uses and their values.
    Default: 1024
  maxExpectedBodySize:
    Type: Number
    Description: Maximum number of bytes allowed in the body of the request. If you
      do not plan to allow large uploads, set it to the largest payload value that
      makes sense for your web application. Accepting unnecessarily large values can
      cause performance issues, if large payloads are used as an attack vector against
      your web application.
    Default: 4096
  maxExpectedCookieSize:
    Type: Number
    Description: Maximum number of bytes allowed in the cookie header. The maximum
      size should be less than 4096, the size is determined by the amount of information
      your web application stores in cookies. If you only pass a session token via
      cookies, set the size to no larger than the serialized size of the session token
      and cookie metadata.
    Default: 4093
  csrfExpectedHeader:
    Type: String
    Description: The custom HTTP request header, where the CSRF token value is expected
      to be encountered
    Default: x-csrf-token
  csrfExpectedSize:
    Type: Number
    Description: The size in bytes of the CSRF token value. For example if it's a
      canonically formatted UUIDv4 value the expected size would be 36 bytes/ASCII
      characters
    Default: 36
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Resource Prefix
      Parameters:
      - stackName
    - Label:
        default: WAF Implementation
      Parameters:
      - ruleAction
    - Label:
        default: Generic HTTP Request Enforcement
      Parameters:
      - maxExpectedURISize
      - maxExpectedQueryStringSize
      - maxExpectedBodySize
      - maxExpectedCookieSize
    - Label:
        default: Administrative Interface
      Parameters:
      - adminUrlPrefix
      - adminRemoteCidr
    - Label:
        default: Cross-Site Request Forgery (CSRF)
      Parameters:
      - csrfExpectedHeader
      - csrfExpectedSize
    - Label:
        default: Application Specific
      Parameters:
      - includesPrefix
    ParameterLabels:
      stackName:
        default: Resource Name Prefix
      ruleAction:
        default: Rule Effect
      includesPrefix:
        default: Server-side components URI prefix
      adminUrlPrefix:
        default: URI prefix
      adminRemoteCidr:
        default: Allowed IP source (CIDR)
      maxExpectedURISize:
        default: Max. size of URI
      maxExpectedQueryStringSize:
        default: Max. size of QUERY STRING
      maxExpectedBodySize:
        default: Max. size of BODY
      maxExpectedCookieSize:
        default: Max. size of COOKIE
      csrfExpectedHeader:
        default: HTTP Request Header
      csrfExpectedSize:
        default: Token Size

## ::CONDITIONS::
## Determines if we're generating regional or global resources
Conditions:
  isRegional: !Equals [ !Ref stackScope, Regional ]
  isGlobal: !Equals [ !Ref stackScope, Global ]  

Resources:
  # IAMInstanceProfile:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Path: "/"
  #     Roles:
  #       - CodeDeployEC2ServiceRole 
  CodeDeployEC2ServiceRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - CodeDeployEC2ServiceRole
  
  AsgLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 'true'
      InstanceType: t2.micro
      ImageId: !Ref amiId
      KeyName: csye6225
      SecurityGroups:
        - !Ref WebServerSecurityGroupID
      BlockDeviceMappings:
        - DeviceName: "/dev/sdm"
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 20
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sudo su
          echo '#!/bin/sh' > /opt/tomcat/latest/bin/setenv.sh 
          chmod +x /opt/tomcat/latest/bin/setenv.sh 
          echo 'JAVA_OPTS="$JAVA_OPTS -Dspring.profiles.active=prod"' >> /opt/tomcat/latest/bin/setenv.sh
          echo 'JAVA_OPTS="$JAVA_OPTS -Dspring.datasource.url=jdbc:mysql://${MyRDSInstance.Endpoint.Address}:3306/csye6225"' >> /opt/tomcat/latest/bin/setenv.sh
          echo 'JAVA_OPTS="$JAVA_OPTS -Dspring.datasource.username=csye6225master"' >> /opt/tomcat/latest/bin/setenv.sh
          echo 'JAVA_OPTS="$JAVA_OPTS -Dspring.datasource.password=csye6225password"' >> /opt/tomcat/latest/bin/setenv.sh
          echo 'JAVA_OPTS="$JAVA_OPTS -Daws.s3.audio.bucket=${S3BucketName}"' >> /opt/tomcat/latest/bin/setenv.sh
          echo 'JAVA_OPTS="$JAVA_OPTS -Ddomain.name=${DomainName}"' >> /opt/tomcat/latest/bin/setenv.sh
          echo 'JAVA_OPTS="$JAVA_OPTS -Daws.sns.topic.arn=${PasswdResetTopic}"' >> /opt/tomcat/latest/bin/setenv.sh
          systemctl daemon-reload
  
  IamInstanceProfile:
    !Ref CodeDeployEC2ServiceRoleInstanceProfile

  WebappApplication: 
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: "csye6225-webapp"
      ComputePlatform: Server

  WebappDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref WebappApplication
      AutoRollbackConfiguration:
        Enabled: True
        Events:
          - "DEPLOYMENT_FAILURE"
      DeploymentConfigName: "CodeDeployDefault.AllAtOnce"
      DeploymentGroupName: "csye6225-webapp-deployment"
      DeploymentStyle:
        DeploymentType: "IN_PLACE"
        DeploymentOption: "WITHOUT_TRAFFIC_CONTROL"
      Ec2TagFilters:
          - 
            Key: 
              "Name"
            Value: 
              !Sub ${AWS::StackName}-Ec2Instance
            Type: 
              "KEY_AND_VALUE"
      ServiceRoleArn:
        Fn::ImportValue:
          !Sub ${roleStackName}-CodeDeployServiceRole-Arn

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName:
        !Ref AsgLaunchConfig
      MinSize: '3'
      DesiredCapacity: '3'
      MaxSize: '10'
      TargetGroupARNs:
      - !Ref ALBTargetGroup
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Ec2Instance
        PropagateAtLaunch: 'true'
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub ${refStackName}-SUBNETAID
    DependsOn: ALBListener

  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        !Ref WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: '1'
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        !Ref WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: "-1"
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 10% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '10'
      AlarmActions:
      - !Ref WebServerScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          !Ref WebServerGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 5% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '5'
      AlarmActions:
      - !Ref WebServerScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          !Ref WebServerGroup
      ComparisonOperator: LessThanThreshold
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:
        !Ref LoadBalancerName
      Scheme: internet-facing
      Subnets:
      - Fn::ImportValue:
          !Sub "${refStackName}-SUBNETAID"
      - Fn::ImportValue:
          !Sub "${refStackName}-SUBNETBID"
      - Fn::ImportValue:
          !Sub "${refStackName}-SUBNETCID"
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroupID
      Type: application
      IpAddressType: ipv4
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          !Ref ALBTargetGroup
      LoadBalancerArn:
        !Ref LoadBalancer
      Port: '443'
      Protocol: HTTPS
      Certificates:
      - CertificateArn:
          !Ref CertificateArn1

  # ALBListener2:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #     - Type: forward
  #       TargetGroupArn:
  #         Ref: ALBTargetGroup
  #     LoadBalancerArn:
  #       Ref: LoadBalancer
  #     Port: '80'
  #     Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      UnhealthyThresholdCount: 10
      HealthCheckPath: "/"
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Name: MyTargetGroup
      HealthCheckPort: 8080
      TargetType: instance
      Port: 8080
      Protocol: HTTP
      VpcId:
        !Ref ParamVpcId
  DomainRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        HostedZoneId:
          Fn::GetAtt:
          - LoadBalancer
          - CanonicalHostedZoneID
        DNSName:
          Fn::GetAtt:
          - LoadBalancer
          - DNSName
      HostedZoneId:
        !Ref HostedZoneId
      Name:
        !Ref DomainName
      Type: A
  EmailDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: email_address
        AttributeType: S
      KeySchema:
      - AttributeName: email_address
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: email_token
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true



# RDS Instance
  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: csye6225
      Engine: MySQL
      DBInstanceClass: db.t2.medium
      MultiAZ: false
      DBInstanceIdentifier: csye6225-spring2019
      MasterUsername: csye6225master
      MasterUserPassword: csye6225password
      DBSubnetGroupName:
        !Ref myDBSubnetGroup
      PubliclyAccessible: true
      AllocatedStorage: 5
      VPCSecurityGroups:
      - !Ref DBServerSecurityGroupID
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-csye6225-dyndb"

# subnet group for RDS instance
  myDBSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: "subnet group for RDS instance"
      SubnetIds: 
        - Fn::ImportValue: !Sub "${refStackName}-SUBNETAID"
        - Fn::ImportValue: !Sub "${refStackName}-SUBNETBID"
        - Fn::ImportValue: !Sub "${refStackName}-SUBNETCID"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-csye6225-rdssubg
  EmailLambdaFunc:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: email_service
      Handler: "index.handler"
      Role: 
        Fn::ImportValue: 
          !Sub "${roleStackName}-LambdaRole-Arn"
      Code:
        ZipFile: |
          def handler(event, context):
            print("Lambda functoion for email service created, nothing here")
      Runtime: python3.6
      Timeout: 5
      MemorySize: 128

  # SNS Topic
  PasswdResetTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt EmailLambdaFunc.Arn
          Protocol: lambda
      TopicName: PasswdResetTopic
  
  # Permission to associate SNS topic with lambda function 
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt EmailLambdaFunc.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref PasswdResetTopic